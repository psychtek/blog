data_df_rescale <- data_df %>%
select(9:31) %>%
scale(center = TRUE)
data_df_corr <- data_df %>% select(9:31)
data_corrr <- cor(data_df_corr)
corrplot(as.matrix(data_corrr), is.corr = FALSE, method = "square", type = "full")
data_df[,9:31] <- sqrt(data_df[,9:31]) # sqrt transform
data_df_rescale <- data_df %>%
select(9:31) %>%
scale(center = TRUE)
data_df_corr <- data_df %>% select(9:31)
data_corrr <- cor(data_df_corr)
corrplot(as.matrix(data_corrr), is.corr = FALSE, method = "square", type = "full")
data_PCA <- prcomp(data_df_rescale)
# print(data_PCA) # Full PCA matrix
summary(data_PCA)
plot(data_PCA, type = "l")
# data_PCA$rotation
data_df[,9:31] <- sqrt(data_df[,9:31]) # sqrt transform
data_df_rescale <- data_df %>%
select(9:31) %>%
scale(center = TRUE)
data_df_corr <- data_df %>% select(9:31)
data_corrr <- cor(data_df_corr)
corrplot(as.matrix(data_corrr), is.corr = FALSE, method = "square", type = "full")
data_PCA <- prcomp(data_df_rescale)
# print(data_PCA) # Full PCA matrix
summary(data_PCA)
plot(data_PCA, type = "l")
# data_PCA$rotation
data_PCA <- prcomp(data_df_rescale)
# print(data_PCA) # Full PCA matrix
summary(data_PCA)
plot(data_PCA, type = "l")
# data_PCA$rotation
data_PCA <- prcomp(data_df_rescale)
# print(data_PCA) # Full PCA matrix
summary(data_PCA)
plot(data_PCA, type = "l")
# data_PCA$rotation
data_PCA <- prcomp(data_df_rescale)
# print(data_PCA) # Full PCA matrix
summary(data_PCA)
plot(data_PCA, type = "l")
# data_PCA$rotation
summary(data_PCA)
library(FactoMineR)
data_PCA_all <- PCA(data_df_rescale, ncp  = 5, graph = TRUE)
data_PCA_all$eig #eigen values, percent of varaince and cumulative percentage
data_PCA_all$var$coord # correlations betwewen variables and PCs
library(factoextra)
# a more colourful visual representation of the variables and where they converge on a component.
fviz_pca_var(data_PCA_all
, col.var = "cos2"
, gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
, repel = TRUE) # Avoid text overlapping)
corrplot(data_PCA_all$var$cor, is.corr=FALSE)
fviz_contrib(data_PCA_all, choice = "var", axes = 1:2, top = 10)
library(ggbiplot)
ggscreeplot(data_PCA)
ggbiplot(data_PCA_all
, ellipse= TRUE
, choices=1:2
, alpha = 0.25
, circle = TRUE
, groups = data_df$FoodGroup
, varname.adjust = 8
, scale = TRUE)+
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
fviz_pca_biplot(data_PCA_all,
# Individuals
geom.ind = "point",
fill.ind = data_df$FoodGroup, col.ind = "black",
pointshape = 21, pointsize = 2,
palette = "jco",
addEllipses = TRUE,
# Variables
alpha.var ="contrib", col.var = "contrib",
gradient.cols = "RdYlBu",
legend.title = list(fill = "Species", color = "Contrib",
alpha = "Contrib")
)
fviz_pca_biplot(data_PCA_all,
# Individuals
geom.ind = "point",
fill.ind = data_df$FoodGroup, col.ind = "black",
pointshape = 21, pointsize = 2,
palette = "jco",
addEllipses = TRUE,
# Variables
alpha.var ="contrib", col.var = "contrib",
gradient.cols = "RdYlBu",
legend.title = list(fill = "Species", color = "Contrib",
alpha = "Contrib")
)
library(ggforce)
pca_grid <- as.data.frame(data_PCA$rotation)
# Since the first ttwo compomnents make up most of the variance explain will add the
# 5 to make up 77% of the components for this example
ggplot(pca_grid[,1:7], aes(x = .panel_x, y = .panel_y)) +
geom_point(alpha = 0.9, shape = 16, size = 0.5) +
geom_autodensity() +
geom_density2d() +
facet_matrix(vars(everything()), layer.diag = 2, layer.upper = 3,
grid.y.diag = FALSE)
library(ggforce)
pca_grid <- as.data.frame(data_PCA$rotation)
# Since the first ttwo compomnents make up most of the variance explain will add the
# 5 to make up 77% of the components for this example
ggplot(pca_grid[,1:7], aes(x = .panel_x, y = .panel_y)) +
geom_point(alpha = 0.9, shape = 16, size = 0.5) +
geom_autodensity() +
geom_density2d() +
facet_matrix(vars(everything()), layer.diag = 2, layer.upper = 3,
grid.y.diag = FALSE)
library(ggforce)
pca_grid <- as.data.frame(data_PCA$rotation)
# Since the first ttwo compomnents make up most of the variance explain will add the
# 5 to make up 77% of the components for this example
ggplot(pca_grid[,1:7], aes(x = .panel_x, y = .panel_y)) +
geom_point(alpha = 0.9, shape = 16, size = 0.5) +
geom_autodensity() +
geom_density2d() +
facet_matrix(vars(everything()), layer.diag = 2, layer.upper = 3,
grid.y.diag = FALSE)
blogdown:::new_post_addin()
blogdown:::serve_site()
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggplot2)
#library(broom)
library(cowplot)
library(kableExtra)
library(DT)
library(readr)
raw_df <- read_csv("data/ret_task.csv"
, col_types = cols(CR = col_factor(levels = c("same",  "different"))
, Emotion = col_factor(levels = c("negative", "neutral"))
, Sex = col_factor(levels = c("male", "female"))))
raw_df$CorrectAnswer <- recode(raw_df$CorrectAnswer, a = "l", l = "a")
raw_df$Stimulus1.RESP <- recode(raw_df$Stimulus1.RESP, a = "l", l = "a")
# import tables
RET_SEEN <- read_csv("data/RET_SEEN.csv")
RET_UNSEEN_NEW <- read_csv("data/RET_UNSEEN_NEW.csv")
RET_PS_a <- read_csv("data/RET_PS_a.csv")
raw_df <- raw_df %>%
select_all() %>%
mutate(
Pattern_Sep = case_when(
CorrectAnswer == Stimulus1.RESP & CorrectAnswer == "a"  ~ "Hit",
# Condition checks to match correct answer to
CorrectAnswer == Stimulus1.RESP & CorrectAnswer == "l" ~ "Hit",
# the participants response. Labelled as "hits"
CorrectAnswer != Stimulus1.RESP & CorrectAnswer == "l" ~ "Miss",
# and "miss" for easy identifying.
CorrectAnswer != Stimulus1.RESP & CorrectAnswer == "a" ~ "Miss",
TRUE  ~ "")) %>%
mutate(
Score = case_when(
Pattern_Sep == "Hit" ~ 1, # A column of hits and misses coded 1 for hit and 0 for miss
Pattern_Sep == "Miss" ~ 0
)
)  %>%
mutate(
Total_Hits = factor(case_when( # total counts for hits and misses
Score == 1 ~ 1,
Score == 0 ~ 0
)),
Total_Miss = factor(case_when(
Score == 0 ~ 1,
Score == 1 ~ 0
))
)  %>%
mutate(Hit_similar = factor(ifelse(CorrectAnswer %in% c("a") &
# These columns count the appropriate hits and misses
Stimulus1.RESP == "a", 1, 0)),
# for each emotional condition.
Negative_Hit = factor(ifelse(Emotion %in% c("negative") &
Pattern_Sep == "Hit", 1, 0)),
Negative_Miss = factor(ifelse(Emotion %in% c("negative") &
Pattern_Sep == "Miss", 1, 0)),
Neutral_Hit = factor(ifelse(Emotion %in% c("neutral") &
Pattern_Sep == "Hit", 1, 0)),
Neutral_Miss = factor(ifelse(Emotion %in% c("neutral") &
Pattern_Sep == "Miss", 1, 0)))
raw_df$Picture <-  str_remove(raw_df$Picture, ".jpg") #remove the jpg extention
# check the column picture number and compare to the originally coded
# tasks use to setup the experiment.
raw_df <- raw_df %>%
mutate(
coding = case_when(
Picture %in% RET_PS_a$V1 ~ "SIMILAR",
Picture %in% RET_UNSEEN_NEW$nr ~ "NEW",
Picture %in% RET_SEEN$nr ~ "OLD",
TRUE ~ ""))
# Added pattern separation counts similar to Stark(2013)
raw_df <- raw_df %>%
mutate(pshits = ifelse(coding %in% c("SIMILAR") & Stimulus1.RESP == "a", 1, 0),
psmiss = ifelse(coding %in% c("SIMILAR") & Stimulus1.RESP == "l", 1, 0),
pscr = ifelse(coding %in% c("NEW") & Stimulus1.RESP == "l", 1, 0),
psfa = ifelse(coding %in% c("NEW") & Stimulus1.RESP == "a", 1, 0))
a <- raw_df %>% group_by(Subject, Neutral_Hit) %>%
tally() %>%
filter(Neutral_Hit == 1) %>%
select(n) %>%
rename(Neutral_hits = n)
b <- raw_df %>% group_by(Subject, Neutral_Miss) %>%
tally() %>%
filter(Neutral_Miss == 1) %>%
select(n) %>%
rename(Neutral_miss = n)
c <- raw_df %>% group_by(Subject, Negative_Hit) %>%
tally() %>%
filter(Negative_Hit == 1) %>%
select(n) %>%
rename(Negative_hits = n)
d <- raw_df %>% group_by(Subject, Negative_Miss) %>%
tally() %>%
filter(Negative_Miss == 1) %>%
select(n) %>%
rename(Negative_miss = n)
e <- full_join(a, b)
f <- full_join(c, d)
g <- full_join(e, f)
h <- raw_df %>%
group_by(Subject) %>%
filter(Total_Hits == 1) %>%
tally() %>%
rename("Total_hits" = n)
i <- raw_df %>%
group_by(Subject) %>%
filter(Total_Miss == 1) %>%
tally() %>%
rename("Total_miss" = n)
j <- full_join(h, i)
k <- full_join(g, j)
l <- raw_df %>%
select(Subject, Sex, Stimulus1.RT) %>%
group_by(Subject, Sex) %>%
summarise(MeanRT = mean(Stimulus1.RT), )
Ret_task_a <- full_join(l, k)
m <- raw_df %>%
select(Subject, Sex, Emotion, Stimulus1.RT) %>%
filter(Emotion == "negative") %>%
group_by(Subject, Sex) %>%
summarise(Neg_RT = mean(Stimulus1.RT))
n <- raw_df %>%
select(Subject, Sex, Emotion, Stimulus1.RT) %>%
filter(Emotion == "neutral") %>%
group_by(Subject, Sex) %>%
summarise(Neut_RT = mean(Stimulus1.RT))
# ---
d1 <- raw_df %>%
group_by(Subject) %>%
filter(Emotion == "negative" & Hit_similar == "1") %>%
tally() %>%
rename("Neg_Sim_Hit" = n)
d2 <- raw_df %>%
group_by(Subject) %>%
filter(Emotion == "neutral" & Hit_similar == "1") %>%
tally() %>%
rename("Neut_Sim_Hit" = n)
Ret_task_c <- full_join(d1, d2)
# ---
Ret_task_b <- full_join(m, n)
Ret_task_d <- full_join(Ret_task_b, Ret_task_c)
Ret_task_df_temp <- full_join(Ret_task_a, Ret_task_d) # temp join of data tables
pattern_sep_scores <- raw_df %>%
group_by(Subject, Sex) %>%
summarise(n_hits = sum(pshits)
, n_miss = sum(psmiss)
, n_cr = sum(pscr)
, n_fa = sum(psfa)) %>%
mutate(n_hits = replace(n_hits, which(is.na(n_hits)), 0)) %>%
mutate(n_miss = replace(n_miss, which(is.na(n_miss)), 0)) %>%
mutate(n_cr = replace(n_cr, which(is.na(n_cr)), 0)) %>%
mutate(n_fa = replace(n_fa, which(is.na(n_fa)), 0))
pattern_sep_scores <- pattern_sep_scores  %>%
mutate(Perc_correct = (n_hits + n_cr)/(n_hits + n_miss + n_fa +n_cr)
, Dprime = (n_hits/(n_hits + n_miss)-(n_fa/(n_fa + n_cr))))
Ret_task_df_join <-  full_join(Ret_task_df_temp, pattern_sep_scores)
datatable(Ret_task_df_join)
val_task <- read_csv(file = "data/val_task.csv")
val_df <- val_task %>%
group_by(Subject) %>%
summarise(Arousal = mean(arousal.RESP), Valence = mean(valence.RESP), Dominance = mean(dominance.RESP))
val_df$Subject <- as.factor(val_df$Subject)
Ret_task_df_join$Subject <- as.factor(Ret_task_df_join$Subject)
group_39_wide <- full_join(Ret_task_df_join, val_df) # Final data table with all computed results
datatable(group_39_wide)
my_fun <- function(x, num_var){
num_var <- enquo(num_var)
x %>%
summarize(avg = mean(!!num_var), n = n(),
sd = sd(!!num_var), se = sd/sqrt(n))
}
mean_response_time <- group_39_wide %>%
group_by(Sex) %>%
my_fun(MeanRT)
neg_similar_hits <- group_39_wide %>%
group_by(Sex) %>%
na.omit() %>%
my_fun(Neg_Sim_Hit)
kable(mean_response_time) %>% kable_styling()
kable(neg_similar_hits) %>% kable_styling()
# Gather variables and change to wide format
ret_long <- group_39_wide %>%
gather(key, value, Valence, Arousal, Dominance) %>%
select(Subject, key, value, Sex) %>%
rename("Emotion" = key) %>%
arrange(desc(Subject))
ggplot(data = ret_long) +
aes(x = value) +
geom_histogram(bins = 30, fill = "#1f78b4") +
labs(title = "Distribution of Emotion Response Scores",
x = "Mean Scores",
y = "Ratings",
subtitle = "IAPS Scores") +
theme_cowplot() +
facet_wrap(vars(Emotion))
# Negative Emotion Scores
val_task %>%
filter(condition == "negative") %>%
na.omit() %>%
group_by(Subject, Sex) %>%
summarise(Arousal = mean(arousal.RESP)
, Dominance = mean(dominance.RESP)
, Valence = mean(valence.RESP)) %>%
gather(key, value, Arousal, Dominance, Valence) %>%
rename("Emotion" = key) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 20, fill = "#1f78b4") +
labs(title = "Emotion Scores from Negative Stimuli",
y = "Response",
subtitle = "Arousal, Dominance and Valence") +
theme_cowplot() +
facet_wrap(vars(Emotion))
# Neutral Emotion Scores
val_task %>%
filter(condition == "neutral") %>%
na.omit() %>%
group_by(Subject, Sex) %>%
summarise(Arousal = mean(arousal.RESP)
, Dominance = mean(dominance.RESP)
, Valence = mean(valence.RESP)) %>%
gather(key, value, Arousal, Dominance, Valence) %>%
rename("Emotion" = key) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 20, fill = "#1f78b4") +
labs(title = "Emotion Scores from the Neutral Condition",
subtitle = "Arousal, Dominance and Valence") +
theme_cowplot() +
facet_wrap(vars(Emotion))
group_39_wide %>%
gather(key, value, Neutral_hits, Negative_hits) %>% # change to long format
select(Subject, Sex, key, value) %>%
na.omit() %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 22, fill = "#1f78b4") +
theme_cowplot() +
facet_wrap(vars(key)) +
geom_vline(aes(xintercept = mean(value)), linetype = "dashed")
group_39_wide %>%
select(Sex, Neg_Sim_Hit, Subject) %>%
na.omit() %>%
ggplot(aes(x = Neg_Sim_Hit)) +
geom_histogram(bins = 22, fill = "#1f78b4") +
labs(title = "Negative Similar Hits",
subtitle = "Male and Females") +
theme_cowplot() +
facet_wrap(vars(Sex)) +
geom_vline(data = na.omit(group_39_wide), aes(xintercept = mean(Neg_Sim_Hit)), linetype = "dashed")
group_39_wide %>%
select(Sex, Neut_Sim_Hit, Subject) %>%
na.omit() %>%
ggplot(aes(x = Neut_Sim_Hit)) +
geom_histogram(bins = 22, fill = "#1f78b4") +
labs(title = "Neutral Similar Hits",
subtitle = "Male and Females") +
theme_cowplot() +
facet_wrap(vars(Sex)) +
geom_vline(data = na.omit(group_39_wide), aes(xintercept = mean(Neut_Sim_Hit)), linetype = "dashed")
IAPS_Fake_df <- read_csv("data/validation_task_df.csv", # import data
col_types = cols(Group = col_factor(levels = c("b",
"a")), aromn = col_number(), dommn = col_number(),
valmn = col_number()), na = "0")
# Change to long format
IAPS_Fake_df <- IAPS_Fake_df %>%
gather(key, value, aromn, valmn, dommn) %>%
rename("Emotion" = key)
IAPS_Fake_df$Emotion <- as.factor(IAPS_Fake_df$Emotion)
IAPS_Fake_df$Group <- as.factor(IAPS_Fake_df$Group)
library(cowplot)
IAPS_Fake_df %>%
na.omit() %>%
ggplot() +
aes(x = Emotion, y = value, fill = Group, colour = Group) +
geom_boxplot() +
scale_fill_hue() +
scale_color_hue() +
labs(x = "Emotion", y = "Mean Arousal Score", title = "Validated vs Fake Comparison", subtitle = "Original IAPS Images with Altered Images") +
theme_cowplot() +
theme(legend.position = "none") +
facet_wrap(vars(Group))
library(ggpubr)
comparison <- compare_means(value ~ Emotion, group.by = "Group",  data = IAPS_Fake_df)
comparison
model_fake <- aov(value ~ Emotion * Group, data = IAPS_Fake_df)
anova(model_fake)
library(papaja)
apa_print(model_fake)
abc <- group_39_wide %>%
select(Subject, Sex, Negative_hits, Neutral_hits) %>%
na.omit() %>%
gather(value, key, Negative_hits, Neutral_hits) %>%
rename("score" = key) %>%
rename("Condition" = value)
abc$Subject <- factor(abc$Subject)
abc$Condition <- factor(abc$Condition)
abc$Sex <- factor(abc$Sex)
options("contrasts")
options(contrasts = c("contr.helmert", "contr.poly"))
with(abc, interaction.plot(x.factor = Condition, trace.factor = Sex, response = score, fun = mean))
library(ez)
# The following procudes the require output however, this doesnt function with the apa_print function
ezANOVA(
abc
, dv = score
, wid = Subject
, within = Condition
, between = Sex
, type = 3
, detailed = TRUE
, return_aov = TRUE
)
library(afex)
library(emmeans)
# using the afex package - this can be passed to the print function for results output
test <- aov_ez(
id = "Subject"
, dv = "score"
, abc
, between = "Sex"
, within = "Condition"
, check_contrasts = TRUE
, model = "univariate"
)2
with(abc, interaction.plot(x.factor = Condition, trace.factor = Sex, response = score, fun = mean))
library(ez)
# The following procudes the require output however, this doesnt function with the apa_print function
ezANOVA(
abc
, dv = score
, wid = Subject
, within = Condition
, between = Sex
, type = 3
, detailed = TRUE
, return_aov = TRUE
)
library(afex)
library(emmeans)
# using the afex package - this can be passed to the print function for results output
test <- aov_ez(
id = "Subject"
, dv = "score"
, abc
, between = "Sex"
, within = "Condition"
, check_contrasts = TRUE
, model = "univariate"
)2
?aov_ez
with(abc, interaction.plot(x.factor = Condition, trace.factor = Sex, response = score, fun = mean))
library(ez)
# The following procudes the require output however, this doesnt function with the apa_print function
ezANOVA(
abc
, dv = score
, wid = Subject
, within = Condition
, between = Sex
, type = 3
, detailed = TRUE
, return_aov = TRUE
)
library(afex)
library(emmeans)
# using the afex package - this can be passed to the print function for results output
test <- aov_ez(
id = "Subject"
, dv = "score"
, abc
, between = "Sex"
, within = "Condition"
, check_contrasts = TRUE
)2
# The following procudes the require output however, this doesnt function with the apa_print function
ezANOVA(
abc
, dv = score
, wid = Subject
, within = Condition
, between = Sex
, type = 3
, detailed = TRUE
, return_aov = TRUE
)
with(abc, interaction.plot(x.factor = Condition, trace.factor = Sex, response = score, fun = mean))
blogdown:::serve_site()
